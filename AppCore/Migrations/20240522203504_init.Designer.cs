// <auto-generated />
using System;
using AppCore.DataDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppCore.Migrations
{
    [DbContext(typeof(PeDbContext))]
    [Migration("20240522203504_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppCore.Models.AcademicGroup", b =>
                {
                    b.Property<int?>("AcademicGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AcademicGroupId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyYear")
                        .HasColumnType("int");

                    b.HasKey("AcademicGroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SpecialityId");

                    b.ToTable("AcademicGroups");
                });

            modelBuilder.Entity("AppCore.Models.Attendance", b =>
                {
                    b.Property<int?>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AttendanceId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int?>("PairId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("PairId");

                    b.HasIndex("PersonId", "Date", "PairId")
                        .IsUnique();

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("AppCore.Models.Auditorium", b =>
                {
                    b.Property<int?>("AuditoriumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AuditoriumId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditoriumId");

                    b.ToTable("Auditoriums");
                });

            modelBuilder.Entity("AppCore.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CourseHours")
                        .HasColumnType("int");

                    b.Property<int>("DirectContactHours")
                        .HasColumnType("int");

                    b.Property<byte>("ECTS")
                        .HasColumnType("tinyint");

                    b.Property<int>("EvaluationForm")
                        .HasColumnType("int");

                    b.Property<int>("IndividualStudyHours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PracticalWorkHours")
                        .HasColumnType("int");

                    b.Property<int>("ProjectHours")
                        .HasColumnType("int");

                    b.Property<int>("SeminarHours")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TotalHours")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("DisciplineId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("AppCore.Models.EducationalInstitution", b =>
                {
                    b.Property<int?>("EducationalInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("EducationalInstitutionId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationalInstitutionType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentEducationalInstitutionId")
                        .HasColumnType("int");

                    b.HasKey("EducationalInstitutionId");

                    b.HasIndex("ParentEducationalInstitutionId");

                    b.ToTable("EducationalInstitutions");
                });

            modelBuilder.Entity("AppCore.Models.Pair", b =>
                {
                    b.Property<int?>("PairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PairId"), 1L, 1);

                    b.Property<int?>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int?>("PairNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PairType")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("PairId");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("PairNumber", "AuditoriumId", "WeekDay")
                        .IsUnique()
                        .HasFilter("[PairNumber] IS NOT NULL AND [AuditoriumId] IS NOT NULL AND [WeekDay] IS NOT NULL");

                    b.HasIndex("PairNumber", "WeekDay", "TeacherId")
                        .IsUnique()
                        .HasFilter("[PairNumber] IS NOT NULL AND [WeekDay] IS NOT NULL AND [TeacherId] IS NOT NULL");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("AppCore.Models.PairAcademicGroup", b =>
                {
                    b.Property<int?>("PairId")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PairAcademicGroupId")
                        .HasColumnType("int");

                    b.HasKey("PairId", "AcademicGroupId");

                    b.HasIndex("AcademicGroupId");

                    b.ToTable("PairAcademicGroup");
                });

            modelBuilder.Entity("AppCore.Models.Speciality", b =>
                {
                    b.Property<int?>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SpecialityId"), 1L, 1);

                    b.Property<int?>("EducationalInstitutionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SpecialityId");

                    b.HasIndex("EducationalInstitutionId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("AppCore.Models.Student", b =>
                {
                    b.Property<int?>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PersonId"), 1L, 1);

                    b.Property<int?>("AcademicGroupId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FinancingForm")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IDNP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("LivesInADorm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PersonId");

                    b.HasIndex("AcademicGroupId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("IDNP")
                        .IsUnique()
                        .HasFilter("[IDNP] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AppCore.Models.Teacher", b =>
                {
                    b.Property<int?>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PersonId"), 1L, 1);

                    b.Property<int?>("AdministrationFunction")
                        .HasColumnType("int");

                    b.Property<int?>("ChiefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationalInstitutionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("IDNP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PersonId");

                    b.HasIndex("EducationalInstitutionId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IDNP")
                        .IsUnique()
                        .HasFilter("[IDNP] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasCheckConstraint("CK_Teachers_IDNP", "LEN(IDNP) = 13 AND IDNP NOT LIKE '%[^0-9]%'");
                });

            modelBuilder.Entity("AppCore.Models.TimeDistribution", b =>
                {
                    b.Property<int?>("TimeDistributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TimeDistributionId"), 1L, 1);

                    b.Property<TimeSpan?>("Begin")
                        .IsRequired()
                        .HasColumnType("TIME(0)");

                    b.Property<int?>("EducationalInstitutionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("End")
                        .IsRequired()
                        .HasColumnType("TIME(0)");

                    b.Property<int?>("PairNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("TimeDistributionId");

                    b.HasIndex("EducationalInstitutionId");

                    b.HasIndex("PairNumber", "EducationalInstitutionId")
                        .IsUnique()
                        .HasFilter("[EducationalInstitutionId] IS NOT NULL");

                    b.ToTable("TimeDistributions");

                    b.HasCheckConstraint("CK_TimeDistributions_Begin_End", "[Begin] < [End]");
                });

            modelBuilder.Entity("AppCore.Models.AcademicGroup", b =>
                {
                    b.HasOne("AppCore.Models.Speciality", "Speciality")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("SpecialityId");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("AppCore.Models.Attendance", b =>
                {
                    b.HasOne("AppCore.Models.Pair", "Pair")
                        .WithMany("Attendances")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppCore.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AppCore.Models.Discipline", b =>
                {
                    b.HasOne("AppCore.Models.Speciality", "Speciality")
                        .WithMany("Disciplines")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("AppCore.Models.EducationalInstitution", b =>
                {
                    b.HasOne("AppCore.Models.EducationalInstitution", "ParentEducationalInstitution")
                        .WithMany("ChildEducationalInstitutions")
                        .HasForeignKey("ParentEducationalInstitutionId");

                    b.Navigation("ParentEducationalInstitution");
                });

            modelBuilder.Entity("AppCore.Models.Pair", b =>
                {
                    b.HasOne("AppCore.Models.Auditorium", "Auditorium")
                        .WithMany()
                        .HasForeignKey("AuditoriumId");

                    b.HasOne("AppCore.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("AppCore.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Auditorium");

                    b.Navigation("Discipline");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AppCore.Models.PairAcademicGroup", b =>
                {
                    b.HasOne("AppCore.Models.AcademicGroup", "AcademicGroup")
                        .WithMany("PairAcademicGroups")
                        .HasForeignKey("AcademicGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppCore.Models.Pair", "Pair")
                        .WithMany("PairAacademicGroups")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicGroup");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("AppCore.Models.Speciality", b =>
                {
                    b.HasOne("AppCore.Models.EducationalInstitution", "EducationalInstitution")
                        .WithMany("Specialities")
                        .HasForeignKey("EducationalInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("AppCore.Models.Student", b =>
                {
                    b.HasOne("AppCore.Models.AcademicGroup", "AcademicGroup")
                        .WithMany("Students")
                        .HasForeignKey("AcademicGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicGroup");
                });

            modelBuilder.Entity("AppCore.Models.Teacher", b =>
                {
                    b.HasOne("AppCore.Models.EducationalInstitution", "EducationalInstitution")
                        .WithMany("Teachers")
                        .HasForeignKey("EducationalInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppCore.Models.Teacher", "Chief")
                        .WithMany("Subordinates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Chief");

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("AppCore.Models.TimeDistribution", b =>
                {
                    b.HasOne("AppCore.Models.EducationalInstitution", "EducationalInstitution")
                        .WithMany("TimeDistributions")
                        .HasForeignKey("EducationalInstitutionId");

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("AppCore.Models.AcademicGroup", b =>
                {
                    b.Navigation("PairAcademicGroups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AppCore.Models.EducationalInstitution", b =>
                {
                    b.Navigation("ChildEducationalInstitutions");

                    b.Navigation("Specialities");

                    b.Navigation("Teachers");

                    b.Navigation("TimeDistributions");
                });

            modelBuilder.Entity("AppCore.Models.Pair", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("PairAacademicGroups");
                });

            modelBuilder.Entity("AppCore.Models.Speciality", b =>
                {
                    b.Navigation("AcademicGroups");

                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("AppCore.Models.Student", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("AppCore.Models.Teacher", b =>
                {
                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
